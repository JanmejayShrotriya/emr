/**

Save push-notification data */ private NotificationResponse savePushNotificationData(NotificationRequest notificationRequest) throws NotificationServiceException { NotificationResponse notificationResponse = new NotificationResponse(); String commAuthTokenRequest = notificationRequest.getCommAuthToken(); if (StringUtils.isBlank(commAuthTokenRequest)) { notificationResponse.setNotificationDataResponse(prepareNotificationFailedResponse("NoCommAuthToken")); return notificationResponse; }

String mobileContextRequest = notificationRequest.getMobileContext(); if (StringUtils.isBlank(mobileContextRequest)) { notificationResponse.setNotificationDataResponse(prepareNotificationFailedResponse("InvalidRequest")); return notificationResponse; }

Redirection contextDetails = redirectionDao.findByContext(mobileContextRequest); if (StringUtils.isBlank(contextDetails.getContext())) { notificationResponse.setNotificationDataResponse(prepareNotificationFailedResponse("NoContextAvailable")); } else { String commAuthTokenDB = contextDetails.getToken();

if (commAuthTokenRequest.equals(commAuthTokenDB)) {
     List<NotificationData> lstNotificationData = notificationRequest.getNotificationData();
     if (CollectionUtil.isListNonEmpty(lstNotificationData)) {
         List<Integer> lstFailedUid = insertNotificationDetails(lstNotificationData, mobileContextRequest, notificationRequest);
         notificationResponse.setNotificationDataResponse(prepareNotificationSuccessResponse(lstFailedUid));
     } else {
         notificationResponse.setNotificationDataResponse(prepareNotificationFailedResponse("NoDataAvailable"));
     }
 } else {
     notificationResponse.setNotificationDataResponse(prepareNotificationFailedResponse("InvalidCommAuthToken"));
 }

} return notificationResponse; }


private List<Integer> insertNotificationDetails(List<NotificationData> lstNotificationData, String mobileContextRequest, NotificationRequest notificationRequest) { List<Integer> lstFailedUid = new ArrayList<>(); int batchSize = notificationDataDao.getBatchSize();

List<PushNotificationData> pushNotificationDataList = new ArrayList<>(batchSize);
List<DeviceDetails> deviceDetailsList = new ArrayList<>(batchSize);
List<Integer> uidList = new ArrayList<>(batchSize);

for (NotificationData notificationData : lstNotificationData) {
    pushNotificationDataList.add(preparePushNotificationData(mobileContextRequest, notificationData, notificationRequest));
    deviceDetailsList.add(prepareDeviceDetails(mobileContextRequest, notificationData));
    uidList.add(Integer.parseInt(notificationData.getUid()));

    if (pushNotificationDataList.size() >= batchSize) {
        processBatchWithEntityManager(pushNotificationDataList, deviceDetailsList, uidList, lstFailedUid);
        pushNotificationDataList.clear();
        deviceDetailsList.clear();
        uidList.clear();
    }
}
if (!pushNotificationDataList.isEmpty()) {
    processBatchWithEntityManager(pushNotificationDataList, deviceDetailsList, uidList, lstFailedUid);
}
return lstFailedUid;

}

@Transactional private void processBatchWithEntityManager(List<PushNotificationData> pushNotificationDataList, List<DeviceDetails> deviceDetailsList, List<Integer> uidList, List<Integer> lstFailedUid) { final int BATCH_SIZE = 50;

// Process PushNotificationData
for (int i = 0; i < pushNotificationDataList.size(); i++) {
    try {
        entityManager.persist(pushNotificationDataList.get(i));
        if ((i + 1) % BATCH_SIZE == 0) {
            entityManager.flush();
            entityManager.clear();
        }
    } catch (Exception ex) {
        lstFailedUid.add(uidList.get(i));
        logger.error("Failed to persist PushNotificationData for UID: {}", uidList.get(i), ex);
    }
}
entityManager.flush();
entityManager.clear();

// Process DeviceDetails
for (int i = 0; i < deviceDetailsList.size(); i++) {
    try {
        entityManager.persist(deviceDetailsList.get(i));
        if ((i + 1) % BATCH_SIZE == 0) {
            entityManager.flush();
            entityManager.clear();
        }
    } catch (Exception ex) {
        logger.error("Failed to persist DeviceDetails for UID: {}", deviceDetailsList.get(i).getUid(), ex);
    }
}
entityManager.flush();
entityManager.clear();

}

private PushNotificationData preparePushNotificationData(String context, NotificationData notificationData, NotificationRequest notificationRequest) { PushNotificationData pushNotificationData = new PushNotificationData(); pushNotificationData.setUid(Integer.parseInt(notificationData.getUid())); pushNotificationData.setContext(context); pushNotificationData.setMessageCount(Integer.parseInt(notificationData.getMessageCount())); pushNotificationData.setMessageType(notificationData.getMessageType()); pushNotificationData.setCreatedTsUTC(DateUtil.getCurrentDateTimeInUTC(DateUtil.MYSQL_DATE_TIME_FORMAT)); pushNotificationData.setPracticeIp(StringUtils.trimToEmpty(notificationRequest.getHostAddress())); pushNotificationData.setHostName(StringUtils.trimToEmpty(notificationRequest.getHostName())); pushNotificationData.setTomcatPath(StringUtils.trimToEmpty(notificationRequest.getTomcatHome())); return pushNotificationData; }

private DeviceDetails prepareDeviceDetails(String context, NotificationData notificationData) { DeviceDetails deviceDetails = deviceDetailsDao.findByUidAndContext(Integer.parseInt(notificationData.getUid()), context); if (StringUtils.isBlank(deviceDetails.getContext())) { deviceDetails.setUid(Integer.parseInt(notificationData.getUid())); deviceDetails.setContext(context); } deviceDetails.setDevicePlatform(notificationData.getDevicePlatform()); deviceDetails.setDeviceToken(notificationData.getDeviceToken()); return deviceDetails; }

